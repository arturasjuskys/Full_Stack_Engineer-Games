
/*

* [Solved] Have the character start on a random location that’s not the upper-left corner.
* Create a “hard mode” where one or more holes are added after certain turns.
* Improve your game’s graphics and interactivity in the terminal. There are many helpful packages to assist with this, and you can really get creative with how you approach terminal games.
* Create a field validator to ensure that the field generated by Field.generateField() can actually be solved. This might be pretty difficult! You’ll essentially be creating a version of a maze solver.

*/

const prompt = require('prompt-sync')({sigint: true});
const hat = '^';
const hole = 'O';
const fieldCharacter = '░';
const pathCharacter = '*';

class Field {
  constructor() {
    this.field = [];
    this.current = [0, 0];
  }
  
  print() {
    for (let i = 0; i < this.field.length; i++) {
    console.log(this.field[i].join(' '));
    }
  }
  
  input() {
    const input = prompt('Your move ').toLowerCase().trim();
    return input;}
  fieldUpdate() {
    this.field[this.current[0]][this.current[1]] = '*';
  }
  
  generateField(height, width, percents) {
    const field = [];
    const percentsToCover = Math.floor(height * width / (100 / percents));
    let randHeight = Math.floor(Math.random() * height);
    let randWidth = Math.floor(Math.random() * width);
    
    // fills the field grid
    for (let i = 0; i < height; i++) {
      const inner = [];
      field.push(inner);
      for(let i = 0; i < width; i++) {
        inner.push(fieldCharacter);
      };
    };
    
    // fills ins the holes
    for (let i = 0; i < percentsToCover; i++) {
      randHeight = Math.floor(Math.random() * height);
      randWidth = Math.floor(Math.random() * width);
      if (field[randHeight][randWidth] === hole) {
        randHeight = Math.floor(Math.random() * height);
        randWidth = Math.floor(Math.random() * width);
        field[randHeight][randWidth] = hole;
      };
      field[randHeight][randWidth] = hole;
    };
    
    // adds start and finish
    field[randWidth][randHeight] = pathCharacter;
    this.current[0] = randWidth;
    this.current[1] = randHeight;
    randHeight = Math.floor(Math.random() * height);
    randWidth = Math.floor(Math.random() * width);
    field[randWidth][randHeight] = hat;
    this.field = field;
  }
  
  move() {
    const input = this.input();
    if (input === 'u') {
      this.current[0] --;
      if (this.current[0] < 0 || this.field[this.current[0]][this.current[1]] === 'O') {
        this.print();
        console.log('YOU DIED!');
      } else if (this.field[this.current[0]][this.current[1]] === '^') {
        console.log('YOU WIN!');
      } else {
        this.fieldUpdate();
        this.print();
        return this.move();
      }
    } else if (input === 'd') {
      this.current[0] ++;
      if (this.current[0] > this.field.length -1 || this.field[this.current[0]][this.current[1]] === 'O') {
        this.print();
        console.log('YOU DIED!');
      } else if (this.field[this.current[0]][this.current[1]] === '^') {
        this.print();
        console.log('YOU WIN!');
      } else {
        this.fieldUpdate();
        this.print();
        return this.move();
      };
    } else if (input === 'l') {
      this.current[1] --;
      console.log(this.current)
      if (this.current[1] < 0 || this.field[this.current[0]][this.current[1]] === 'O') {
        this.print();
        console.log('YOU DIED!');
      } else if (this.field[this.current[0]][this.current[1]] === '^') {
        this.print();
        console.log('YOU WIN!');
      } else {
        this.fieldUpdate();
        this.print();
        return this.move();
      };
    } else if (input === 'r') {
      this.current[1] ++;
      console.log(this.current);
      if (this.current[1] > this.field[0].length -1) {
        this.print();
        console.log('YOU DIED!');
      } else if (this.field[this.current[0]][this.current[1]] === 'O') {
        this.print();
        console.log('YOU DIED!');
      } else if (this.field[this.current[0]][this.current[1]] === '^') {
        this.print();
        console.log('YOU WIN!');
      } else {
        this.fieldUpdate();
        this.print();
        return this.move();
      };
    } else {
      console.log('You need to choose one of the following: "u", "r", "d", "l".')
      return this.move();
    };
  };
};
const game = new Field();
game.generateField(10, 10, 30);
game.print();
game.move();
